spring.application.name=user-service

# DevTools Configuration
spring.devtools.restart.enabled=true
spring.devtools.livereload.enabled=true
spring.devtools.restart.poll-interval=1000
spring.devtools.restart.quiet-period=500

# Disable Docker Compose
spring.docker.compose.enabled=false
spring.config.import=optional:file:.env

# Database Configuration
spring.datasource.url=${SPRING_DATASOURCE_URL:jdbc:postgresql://ep-soft-mud-a7d3w3z7-pooler.ap-southeast-2.aws.neon.tech/user-service?sslmode=require}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME:neondb_owner}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD:your-password-not-set}
spring.datasource.driver-class-name=org.postgresql.Driver

# RabbitMQ Configuration
spring.rabbitmq.host=${SPRING_RABBITMQ_HOST:localhost}
spring.rabbitmq.port=${SPRING_RABBITMQ_PORT:5671}
spring.rabbitmq.username=${SPRING_RABBITMQ_USERNAME:guest}
spring.rabbitmq.password=${SPRING_RABBITMQ_PASSWORD:guest}
spring.rabbitmq.virtual-host=${SPRING_RABBITMQ_VIRTUAL_HOST:/}
spring.rabbitmq.ssl.enabled=${SPRING_RABBITMQ_SSL_ENABLED:true}
rabbitmq.queue.user.name=user-creation-queue

# JPA Configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.open-in-view=false

# Server Configuration
server.port=${SERVER_PORT:8080}

# API Security (make sure this is loaded from environment)
api.key=${API_KEY:your-api-key-not-set}

# JWT Configuration
JWT_SECRET=${JWT_SECRET:your-default-jwt-secret-key-must-be-at-least-32-chars}

# Active Profile
spring.profiles.active=default

