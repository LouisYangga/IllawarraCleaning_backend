spring.application.name=pricing-service
# Database Configuration
spring.datasource.url=${SPRING_DATASOURCE_URL:jdbc:postgresql://ep-soft-mud-a7d3w3z7-pooler.ap-southeast-2.aws.neon.tech/booking-service?sslmode=require}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME:neondb_owner}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD:your-password-not-set}
spring.datasource.driver-class-name=org.postgresql.Driver

# RabbitMQ Configuration
spring.rabbitmq.host=${SPRING_RABBITMQ_HOST:localhost}
spring.rabbitmq.port=${SPRING_RABBITMQ_PORT:5672}
spring.rabbitmq.username=${SPRING_RABBITMQ_USERNAME:guest}
spring.rabbitmq.password=${SPRING_RABBITMQ_PASSWORD:guest}
rabbitmq.exchange.name=booking-exchange
rabbitmq.queue.quotation.name=quotation-queue
rabbitmq.routing.quotation.key=quotation.calculation

# JPA Configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.open-in-view=false
spring.jpa.properties.hibernate.type.preferred_sql_types.java.lang.Enum=VARCHAR

# Server Configuration
server.port=${SERVER_PORT:8084}
user-service.url=http://user-service:8080
booking.service.url=http://localhost:8082
# API Security (make sure this is loaded from environment)
api.key=${API_KEY:your-api-key-not-set}
# JWT Configuration
JWT_SECRET=${JWT_SECRET}

# Disable default security password
spring.security.user.password=none
spring.security.user.name=none